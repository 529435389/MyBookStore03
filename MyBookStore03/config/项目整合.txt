spring-springMVC-mybatis整合
1、导入jar包:22个
c3p0-0.9.1.2.jar
com.springsource.net.sf.cglib-2.2.0.jar
com.springsource.org.aopalliance-1.0.0.jar
com.springsource.org.aspectj.weaver-1.6.8.RELEASE.jar
commons-logging-1.1.3.jar
jstl.jar
log4j-1.2.17.jar
mybatis-3.4.2.jar
mybatis-spring-1.3.1.jar
mysql-connector-java-5.1.37-bin.jar
spring-aop-4.0.0.RELEASE.jar
spring-aspects-4.0.0.RELEASE.jar
spring-beans-4.0.0.RELEASE.jar
spring-context-4.0.0.RELEASE.jar
spring-core-4.0.0.RELEASE.jar
spring-expression-4.0.0.RELEASE.jar
spring-jdbc-4.0.0.RELEASE.jar
spring-orm-4.0.0.RELEASE.jar
spring-tx-4.0.0.RELEASE.jar
spring-web-4.0.0.RELEASE.jar
spring-webmvc-4.0.0.RELEASE.jar
standard.jar
2、然后添加mybatis-config.xml和log4j.xml
3、创建项目的包结构
4、创建Spring-beans.xml和db.properties
<!-- 配置检查注解组件的包:不检查controller组件 -->
	<context:component-scan base-package="edu.sdp.com">
		<context:exclude-filter type="annotation"
			expression="org.springframework.stereotype.Controller" />
	</context:component-scan>
	<!-- 引入db.properties -->
	<context:property-placeholder location="db.properties" />
	<!-- 配置数据源ComboPooledDataSource -->
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
		<property name="user" value="${jdbc.username}"></property>
		<property name="password" value="${jdbc.password}"></property>
		<property name="jdbcUrl" value="${jdbc.url}"></property>
		<property name="driverClass" value="${jdbc.driver}"></property>
	</bean>
	<!-- 配置事务DataSourceTransactionManager:并引用dataSource数据源 -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"></property>
	</bean>
	<!-- 开启事务 -->
	<tx:annotation-driven />
	<!-- 配置mybatis:SqlSessionFactoryBean -->
	<bean id="sqlSessionFactoryBean" class="org.mybatis.spring.SqlSessionFactoryBean">
		<!-- 配置数据源 -->
		<property name="dataSource" ref="dataSource"></property>
		<!-- 引入mybatis全局配置文件 -->
		<property name="configLocation" ref="classpath:mybatis-config.xml"></property>
		<!-- 引入mapper映射文件 -->
		<property name="mapperLocations" ref="classpath:mybatis_mapper/*.xml"></property>
	</bean>
	<!-- 扫描mapper接口 -->
	<mybatis-spring:scan base-package="edu.sdp.com.client.mapper" />
	<mybatis-spring:scan base-package="edu.sdp.com.manager.mapper" />
5、创建Spring-mvc.xml
<!-- 配置检查注解组件的包:只检查controller注解 -->
	<context:component-scan base-package="edu.sdp.com">
		<context:include-filter type="annotation"
			expression="org.springframework.stereotype.Controller" />
	</context:component-scan>
	<!-- 配置视图解析器 -->
	<bean id="viewResolver"
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix" value="/WEB-INF/views/"></property>
		<property name="suffix" value=".jsp"></property>
	</bean>
6、配置web.xml：DispatcherServlet和ServletContextListener用于加载spring-beans.xml和spring-mvc.xml
<!-- 配置DispatcherServlet用于SpringMVC处理请求的映射 -->
	<servlet>
		<servlet-name>springDispatcherServlet</servlet-name>
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
		<init-param>
			<param-name>contextConfigLocation</param-name>
			<param-value>classpath:spring-mvc.xml</param-value>
		</init-param>
		<!-- 该属性如果>0：该Servlet在项目启动的时候创建实例 如果<=0:该项目在第一次请求发送的时候创建Servelt实例 -->
		<load-on-startup>1</load-on-startup>
	</servlet>

	<!-- Map all requests to the DispatcherServlet for handling -->
	<servlet-mapping>
		<servlet-name>springDispatcherServlet</servlet-name>
		<url-pattern>/</url-pattern>
	</servlet-mapping>
	<!-- 配置ServeltContextListener:ContextLoaderListener -->
	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>classpath:spring-beans.xml</param-value>
	</context-param>
	<listener>
		<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
	</listener>
7、使用注解声明组件 